"use strict";(self.webpackChunkfalcon_docs=self.webpackChunkfalcon_docs||[]).push([[311],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Setup Development Environment",description:"Setup Development Environment",sidebar_position:1,hide_table_of_contents:!1},l="Setup Development Environment",i={unversionedId:"development/extending-falcon/setup-dev-env",id:"development/extending-falcon/setup-dev-env",title:"Setup Development Environment",description:"Setup Development Environment",source:"@site/docs/development/extending-falcon/setup-dev-env.md",sourceDirName:"development/extending-falcon",slug:"/development/extending-falcon/setup-dev-env",permalink:"/development/extending-falcon/setup-dev-env",draft:!1,editUrl:"https://github.com/governify/falcon-docs/edit/main/docs/development/extending-falcon/setup-dev-env.md",tags:[],version:"current",lastUpdatedBy:"alesancor1",lastUpdatedAt:1691447291,formattedLastUpdatedAt:"Aug 7, 2023",sidebarPosition:1,frontMatter:{title:"Setup Development Environment",description:"Setup Development Environment",sidebar_position:1,hide_table_of_contents:!1},sidebar:"defaultSidebar",previous:{title:"Architecture",permalink:"/development/architecture"},next:{title:"Dashboards",permalink:"/customization/dashboards"}},s={},p=[{value:"Infrastructure",id:"infrastructure",level:2},{value:"Deploying the system using Docker-Compose",id:"deploying-the-system-using-docker-compose",level:2},{value:"Steps",id:"steps",level:3},{value:"Develop a feature in an existing microservice",id:"develop-a-feature-in-an-existing-microservice",level:3},{value:"Deploying the system in a Kubernetes cluster",id:"deploying-the-system-in-a-kubernetes-cluster",level:2},{value:"Steps",id:"steps-1",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setup-development-environment"},"Setup Development Environment"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"infrastructure"},"Infrastructure"),(0,a.kt)("p",null,"The infrastructure and microservices are already configured to work straight away and be connected (docker or node). All the infrastructure will be exposed so no docker network is needed. All the components will be deployed locally using the following ports:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Component"),(0,a.kt)("th",{parentName:"tr",align:null},"Port"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Render"),(0,a.kt)("td",{parentName:"tr",align:null},"5100")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Assets"),(0,a.kt)("td",{parentName:"tr",align:null},"5200")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Reporter"),(0,a.kt)("td",{parentName:"tr",align:null},"5300")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Registry"),(0,a.kt)("td",{parentName:"tr",align:null},"5400")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Collector-dynamic"),(0,a.kt)("td",{parentName:"tr",align:null},"5501")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Dashboard"),(0,a.kt)("td",{parentName:"tr",align:null},"5600")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Director"),(0,a.kt)("td",{parentName:"tr",align:null},"5800")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Prometheus"),(0,a.kt)("td",{parentName:"tr",align:null},"5900")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DB-Mongo-Registry"),(0,a.kt)("td",{parentName:"tr",align:null},"5001")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DB-Influx-Reporter"),(0,a.kt)("td",{parentName:"tr",align:null},"5002")))),(0,a.kt)("p",null,"The default configuration of the infrastructure is available ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/governify/falcon-infrastructure/blob/main/assets/public/infrastructure-local.yaml"},"here"),"."),(0,a.kt)("h2",{id:"deploying-the-system-using-docker-compose"},"Deploying the system using Docker-Compose"),(0,a.kt)("p",null,"The prerequisites for deploying the system are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Git")," for cloning the repository"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Docker")," (v20.0.0 or greater) and ",(0,a.kt)("strong",{parentName:"li"},"docker-compose")," (v1.25.0 or greater) installed "),(0,a.kt)("li",{parentName:"ul"},"Having the ",(0,a.kt)("strong",{parentName:"li"},"ports")," showed up in the last section available.")),(0,a.kt)("h3",{id:"steps"},"Steps"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"0.")," In case you are running a linux machine, you need to asociate the host.docker.internal url to 172.17.0.1 (docker's gateway)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"host-manager -add host.docker.internal 172.17.0.1\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1.")," Clone the repository and checkout to the develop branch:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/governify/falcon-infrastructure\ncd falcon-infrastructure\ngit checkout origin/develop\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2.")," Deploy the system"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker-compose -f ./docker-compose-local.yaml --env-file ./.env-local up -d\n")),(0,a.kt)("p",null,"Bear in mind that any key or configuration can be setted up in the .env-local file instead of .env. On any docker-compose-local.yaml or .env-local change, run the step 2 again it order for it to take place. Also any service deployed with node won't use the .env-local variables so make sure they are properly configured."),(0,a.kt)("h3",{id:"develop-a-feature-in-an-existing-microservice"},"Develop a feature in an existing microservice"),(0,a.kt)("p",null,"To develop a feature is as simple as shutting the container down and then starting the microservice cloned from GitHub. E.g. If the collector-dynamic wants to be modified:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Stop the container:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker stop falcon-collector-dynamic\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Clone and start the microservice:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/governify/collector-dynamic\ncd collector-dynamic\nnpm i\nnode index\n")),(0,a.kt)("p",null,"It will start in the same port as the container was and will be properly connected to the entire infrastructure."),(0,a.kt)("h2",{id:"deploying-the-system-in-a-kubernetes-cluster"},"Deploying the system in a Kubernetes cluster"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"For development purposes it is more appropiate to use docker-compose due to its simplicity. Nevertheless, if the production environment is a Kubernetes cluster, it is recommended to test the system on this locally deployed cluster first.")),(0,a.kt)("p",null,"Governify provides Helm charts for deploying Falcon services inside a Kubernetes cluster. The following steps describe how to deploy the infrastructure inside a development cluster (or a single-node cluster like minikube):"),(0,a.kt)("h3",{id:"steps-1"},"Steps"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1.")," Create Namespace"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$    kubectl create namespace governify-falcon\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2.")," Configure kubernetes for assigning NodePorts in range (3000-9000) by adding ",(0,a.kt)("inlineCode",{parentName:"p"},"--service-node-port-range=3000-6000")," to the kubernetes kube-apiserver config file. If using docker-desktop ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/64758012/location-of-kubernetes-config-directory-with-docker-desktop-on-windows"},"check this page"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"3.")," Create a values.yaml file with the following content"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"global:\n    node_env: development\n    gov_infrastructure: <assets_call_to_infrastructure-local.yaml>\n    login_user: <username>\n    login_password: <password>\n\nassets-manager:\n    gov_infrastructure: <local_path_to_infrastructure-local.yaml>\n    assets_repository: <repository_url> (defaults to current assets repository inside github governify organization)\n    assets_repository_branch: <branch> (default: main)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"4.")," Install charts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$    helm repo add governify https://governify.github.io/helm-charts\n$    helm repo update\n$    helm install -f values.yaml <release_name> governify/<chart_name>\n")),(0,a.kt)("p",null,"More information about the configuration options available for Governify-Falcon HELM chart can be found at our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/governify/helm-charts/tree/main/infrastructure/Governify-Falcon"},"HELM Charts repository"),"."))}d.isMDXComponent=!0}}]);